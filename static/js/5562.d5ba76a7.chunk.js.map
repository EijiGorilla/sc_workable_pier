{"version":3,"file":"static/js/5562.d5ba76a7.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/src/components/dropdown-item/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/dropdown-item/dropdown-item.scss?tag=calcite-dropdown-item&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/dropdown-item/dropdown-item.tsx"],"sourcesContent":["export const CSS = {\n  container: \"container\",\n  containerNone: \"container--none-selection\",\n  icon: \"dropdown-item-icon\",\n  iconEnd: \"dropdown-item-icon--end\",\n  iconStart: \"dropdown-item-icon--start\",\n  itemContent: \"dropdown-item-content\",\n  link: \"dropdown-link\",\n};\n","@mixin item-styling {\n  @apply text-color-3\n    relative\n    flex\n    flex-grow\n    cursor-pointer\n    items-center\n    no-underline\n    duration-150\n    ease-in-out;\n}\n\n:host {\n  @apply relative\n    flex\n    flex-grow\n    items-center\n    focus-base;\n}\n\n.container {\n  @include item-styling;\n  @apply text-start;\n\n  & a {\n    @include item-styling;\n    @apply focus-base;\n  }\n}\n\n.dropdown-item-content {\n  @apply flex-auto py-0.5;\n}\n\n// item icon\n.dropdown-item-icon {\n  @apply relative\n    opacity-0\n    duration-150\n    ease-in-out;\n  transform: scale(0.9);\n}\n\n:host([scale=\"s\"]) {\n  .container {\n    @apply text-n2h py-1 px-2;\n  }\n\n  .dropdown-item-icon,\n  .dropdown-item-icon--start {\n    padding-inline-end: var(--calcite-spacing-sm);\n  }\n\n  .dropdown-item-icon--end {\n    padding-inline-start: var(--calcite-spacing-sm);\n  }\n}\n\n:host([scale=\"m\"]) {\n  .container {\n    @apply text-n1h py-2 px-3;\n  }\n\n  .dropdown-item-icon,\n  .dropdown-item-icon--start {\n    padding-inline-end: var(--calcite-spacing-md);\n  }\n\n  .dropdown-item-icon--end {\n    padding-inline-start: var(--calcite-spacing-md);\n  }\n}\n\n:host([scale=\"l\"]) {\n  .container {\n    @apply text-0h py-2.5 px-4;\n  }\n\n  .dropdown-item-icon,\n  .dropdown-item-icon--start {\n    padding-inline-end: var(--calcite-spacing-xl);\n  }\n\n  .dropdown-item-icon--end {\n    padding-inline-start: var(--calcite-spacing-xl);\n  }\n}\n\n//focus\n:host(:focus) {\n  @apply focus-inset outline-none;\n\n  .container {\n    @apply text-color-1 no-underline;\n  }\n}\n\n:host(:hover:not([disabled])),\n:host(:active:not([disabled])) {\n  .container {\n    @apply bg-foreground-2 text-color-1 no-underline;\n  }\n\n  .dropdown-link {\n    @apply text-color-1;\n  }\n}\n\n:host(:active:not([disabled])) .container {\n  @apply bg-foreground-3;\n}\n\n:host([selected]) .container:not(.container--none-selection),\n:host([selected]) .dropdown-link {\n  @apply text-color-1 font-medium;\n  & calcite-icon {\n    color: theme(\"backgroundColor.brand\");\n  }\n}\n\n:host(:hover:not([disabled])) .dropdown-item-icon {\n  color: theme(\"borderColor.color.1\");\n  @apply opacity-100;\n}\n\n:host([selected]) .dropdown-item-icon {\n  color: theme(\"backgroundColor.brand\");\n  @apply opacity-100;\n}\n\n@include base-component();\n@include disabled();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  VNode,\n} from \"@stencil/core\";\nimport { toAriaBoolean } from \"../../utils/dom\";\nimport { ItemKeyboardEvent } from \"../dropdown/interfaces\";\nimport { RequestedItem } from \"../dropdown-group/interfaces\";\nimport { FlipContext, Scale, SelectionMode } from \"../interfaces\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { getIconScale } from \"../../utils/component\";\nimport {\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport { IconNameOrString } from \"../icon/interfaces\";\nimport { CSS } from \"./resources\";\n\n/**\n * @slot - A slot for adding text.\n */\n@Component({\n  tag: \"calcite-dropdown-item\",\n  styleUrl: \"dropdown-item.scss\",\n  shadow: true,\n})\nexport class DropdownItem implements InteractiveComponent, LoadableComponent {\n  //--------------------------------------------------------------------------\n  //\n  //  Public Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   *  Specifies the URL of the linked resource, which can be set as an absolute or relative path.\n   *\n   * Determines if the component will render as an anchor.\n   */\n  @Prop({ reflect: true }) href: string;\n\n  /** Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`). */\n  @Prop({ reflect: true }) iconFlipRtl: FlipContext;\n\n  /** Specifies an icon to display at the start of the component. */\n  @Prop({ reflect: true }) iconStart: IconNameOrString;\n\n  /** Specifies an icon to display at the end of the component. */\n  @Prop({ reflect: true }) iconEnd: IconNameOrString;\n\n  /** Accessible name for the component. */\n  @Prop() label: string;\n\n  /** Specifies the relationship to the linked document defined in `href`. */\n  @Prop({ reflect: true }) rel: string;\n\n  /** When `true`, the component is selected. */\n  @Prop({ reflect: true, mutable: true }) selected = false;\n\n  /** Specifies the frame or window to open the linked document. */\n  @Prop({ reflect: true }) target: string;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /** Fires when the component is selected. */\n  @Event({ cancelable: false }) calciteDropdownItemSelect: EventEmitter<void>;\n\n  /**\n   * @internal\n   */\n  @Event({ cancelable: false }) calciteInternalDropdownItemSelect: EventEmitter<RequestedItem>;\n\n  /** @internal */\n  @Event({ cancelable: false })\n  calciteInternalDropdownItemKeyEvent: EventEmitter<ItemKeyboardEvent>;\n\n  /** @internal */\n  @Event({ cancelable: false }) calciteInternalDropdownCloseRequest: EventEmitter<void>;\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    this.el?.focus();\n  }\n\n  /**\n   * Specifies the selection mode inherited from `calcite-dropdown-group`, defaults to `single`:\n   * - `multiple` allows any number of selected items,\n   * - `single` allows only one selection (default),\n   * - `none` doesn't allow for any selection.\n   *\n   * @internal\n   */\n  @Prop() selectionMode: Extract<\"none\" | \"single\" | \"multiple\", SelectionMode> = \"single\";\n\n  /**\n   * Specifies the size of the component inherited from `calcite-dropdown`, defaults to `m`.\n   *\n   * @internal\n   */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  componentWillLoad(): void {\n    setUpLoadableComponent(this);\n    this.initialize();\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  connectedCallback(): void {\n    this.initialize();\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  render(): VNode {\n    const { href, selectionMode, label, iconFlipRtl } = this;\n\n    const iconStartEl = (\n      <calcite-icon\n        class={CSS.iconStart}\n        flipRtl={iconFlipRtl === \"start\" || iconFlipRtl === \"both\"}\n        icon={this.iconStart}\n        scale={getIconScale(this.scale)}\n      />\n    );\n    const contentNode = (\n      <span class={CSS.itemContent}>\n        <slot />\n      </span>\n    );\n    const iconEndEl = (\n      <calcite-icon\n        class={CSS.iconEnd}\n        flipRtl={iconFlipRtl === \"end\" || iconFlipRtl === \"both\"}\n        icon={this.iconEnd}\n        scale={getIconScale(this.scale)}\n      />\n    );\n\n    const slottedContent =\n      this.iconStart && this.iconEnd\n        ? [iconStartEl, contentNode, iconEndEl]\n        : this.iconStart\n          ? [iconStartEl, contentNode]\n          : this.iconEnd\n            ? [contentNode, iconEndEl]\n            : contentNode;\n\n    const contentEl = !href ? (\n      slottedContent\n    ) : (\n      <a\n        aria-label={label}\n        class={CSS.link}\n        href={href}\n        ref={(el) => (this.childLink = el)}\n        rel={this.rel}\n        tabIndex={-1}\n        target={this.target}\n      >\n        {slottedContent}\n      </a>\n    );\n\n    const itemRole = href\n      ? null\n      : selectionMode === \"single\"\n        ? \"menuitemradio\"\n        : selectionMode === \"multiple\"\n          ? \"menuitemcheckbox\"\n          : \"menuitem\";\n\n    const itemAria = selectionMode !== \"none\" ? toAriaBoolean(this.selected) : null;\n    const { disabled } = this;\n\n    return (\n      <Host\n        aria-checked={itemAria}\n        aria-label={!href ? label : \"\"}\n        role={itemRole}\n        tabIndex={disabled ? -1 : 0}\n      >\n        <InteractiveContainer disabled={disabled}>\n          <div\n            class={{\n              [CSS.container]: true,\n              [CSS.containerNone]: selectionMode === \"none\",\n            }}\n          >\n            {selectionMode !== \"none\" ? (\n              <calcite-icon\n                class={CSS.icon}\n                icon={selectionMode === \"multiple\" ? \"check\" : \"bullet-point\"}\n                scale={getIconScale(this.scale)}\n              />\n            ) : null}\n            {contentEl}\n          </div>\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Event Listeners\n  //\n  //--------------------------------------------------------------------------\n\n  @Listen(\"click\") onClick(): void {\n    this.emitRequestedItem();\n  }\n\n  @Listen(\"keydown\")\n  keyDownHandler(event: KeyboardEvent): void {\n    switch (event.key) {\n      case \" \":\n      case \"Enter\":\n        this.emitRequestedItem();\n        if (this.href) {\n          this.childLink.click();\n        }\n        event.preventDefault();\n        break;\n      case \"Escape\":\n        this.calciteInternalDropdownCloseRequest.emit();\n        event.preventDefault();\n        break;\n      case \"Tab\":\n        this.calciteInternalDropdownItemKeyEvent.emit({ keyboardEvent: event });\n        break;\n      case \"ArrowUp\":\n      case \"ArrowDown\":\n      case \"Home\":\n      case \"End\":\n        event.preventDefault();\n        this.calciteInternalDropdownItemKeyEvent.emit({ keyboardEvent: event });\n        break;\n    }\n  }\n\n  @Listen(\"calciteInternalDropdownItemChange\", { target: \"body\" })\n  updateActiveItemOnChange(event: CustomEvent): void {\n    const parentEmittedChange = event.composedPath().includes(this.parentDropdownGroupEl);\n\n    if (parentEmittedChange) {\n      this.requestedDropdownGroup = event.detail.requestedDropdownGroup;\n      this.requestedDropdownItem = event.detail.requestedDropdownItem;\n      this.determineActiveItem();\n    }\n    event.stopPropagation();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteDropdownItemElement;\n\n  /** id of containing group */\n  private parentDropdownGroupEl: HTMLCalciteDropdownGroupElement;\n\n  /** requested group */\n  private requestedDropdownGroup: HTMLCalciteDropdownGroupElement;\n\n  /** requested item */\n  private requestedDropdownItem: HTMLCalciteDropdownItemElement;\n\n  /** if href is requested, track the rendered child link*/\n  private childLink: HTMLAnchorElement;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private initialize(): void {\n    this.parentDropdownGroupEl = this.el.closest(\"calcite-dropdown-group\");\n    if (this.selectionMode === \"none\") {\n      this.selected = false;\n    }\n  }\n\n  private determineActiveItem(): void {\n    switch (this.selectionMode) {\n      case \"multiple\":\n        if (this.el === this.requestedDropdownItem) {\n          this.selected = !this.selected;\n        }\n        break;\n\n      case \"single\":\n        if (this.el === this.requestedDropdownItem) {\n          this.selected = true;\n        } else if (this.requestedDropdownGroup === this.parentDropdownGroupEl) {\n          this.selected = false;\n        }\n        break;\n\n      case \"none\":\n        this.selected = false;\n        break;\n    }\n  }\n\n  private emitRequestedItem(): void {\n    this.calciteDropdownItemSelect.emit();\n    this.calciteInternalDropdownItemSelect.emit({\n      requestedDropdownItem: this.el,\n      requestedDropdownGroup: this.parentDropdownGroupEl,\n    });\n  }\n}\n"],"names":["CSS","container","containerNone","icon","iconEnd","iconStart","itemContent","link","DropdownItem","proxyCustomElement","HTMLElement","setFocus","componentFocusable","this","el","focus","componentWillLoad","setUpLoadableComponent","initialize","componentDidLoad","setComponentLoaded","connectedCallback","componentDidRender","updateHostInteraction","render","href","selectionMode","label","iconFlipRtl","iconStartEl","h","key","class","flipRtl","scale","getIconScale","contentNode","iconEndEl","slottedContent","contentEl","ref","childLink","rel","tabIndex","target","itemRole","itemAria","toAriaBoolean","selected","disabled","Host","role","InteractiveContainer","onClick","emitRequestedItem","keyDownHandler","event","click","preventDefault","calciteInternalDropdownCloseRequest","emit","calciteInternalDropdownItemKeyEvent","keyboardEvent","updateActiveItemOnChange","composedPath","includes","parentDropdownGroupEl","requestedDropdownGroup","detail","requestedDropdownItem","determineActiveItem","stopPropagation","closest","calciteDropdownItemSelect","calciteInternalDropdownItemSelect"],"sourceRoot":""}